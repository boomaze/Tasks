USE [TMS]
GO

/****** Object:  StoredProcedure [dbo].[SP_RPT_SUPPLIER_EXPENSE_MODE]    Script Date: 7/12/2022 1:41:02 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/**
# ==========================================================================================
 Author:	  Johana Aleman
 Create date: 3/16/2016
 Description: Develop Details Report to measure Supplier Expense by Mode in an effort 
			  to track Supplier Inbound Profitability and potentially identify Supplier 
			  candidates for conversion from VSP to UNFI Managed 
Modified:
	041218  JAleman		Format the numeric values to 3 digits and removed the With(nolock)	
	042418  JAleman		Origin-City Load was having issues - get the Min(Seq_number) and set that city as origin 
	012120				Modified logic to utilize the IS_TRANSFER_VENDOR field 
									in the [dbo].[TMS_VENDOR] table when selecting 
    052620	JAleman		Use the [dbo].[PALLET_HANDLING_RATE] table to get the direct PO =[BACKHAUL_RATE]
						and Crossdock = [CROSS_DOCK_RATE]
 ===========================================================================================*/
ALTER PROCEDURE [dbo].[SP_RPT_SUPPLIER_EXPENSE_MODE]
(
	@StarDate DATE --= '11/01/2015'
,	@EndDate DATE --= '11/21/2015'
,	@LawsonNumber VARCHAR(MAX) = 'all'
,	@VendorNumber VARCHAR(MAX) = 'all'
,	@UNFI_DC VARCHAR(MAX) = NULL
,	@IncludeTransfers BIT 
)
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	IF (@IncludeTransfers = 1) -- include all Vendors
		SET @IncludeTransfers = NULL
/*===========================================================================================
Examples:
	EXEC dbo.SP_RPT_SUPPLIER_EXPENSE_MODE '11/01/2015','11/21/2015', 'all','all',null,1
	
	EXEC dbo.SP_RPT_SUPPLIER_EXPENSE_MODE '2015-8-8','2015-12-8', 'all','all',null,1	
===========================================================================================*/

	SELECT LO_PURCHASE_ORDER_ID, PO_NUMBER, LO_LOAD_NUMBER, SUM(ISNULL(FREIGHT_PAID_PO,0)) AS FREIGHT_PAID_PO
	INTO #TOTALS
	FROM dbo.fnGetSuppliersPOExpenses(@StarDate, @EndDate) GROUP BY LO_PURCHASE_ORDER_ID,PO_NUMBER, LO_LOAD_NUMBER
	
	CREATE clustered INDEX #IDX_TOT_LO ON #TOTALS (LO_LOAD_NUMBER)
	CREATE INDEX #IDX_TOT_LPO ON #TOTALS (LO_PURCHASE_ORDER_ID)
	


	SELECT DISTINCT
		lpo.PO_NUMBER
	,	lPl.LO_LOAD_NUMBER
	,	lpo.D_RTE
	,	(
		CASE
			WHEN lpo.FRZ_UNITS > 0
			THEN 'F'
			WHEN lpo.CHL_UNITS > 0
			THEN 'C'
			WHEN lpo.RPK_UNITS > 0
			THEN 'D'
			ELSE 'D'
		END) AS PROTECTION_LEVEL
	,	CAST(lpo.ORIGINAL_PICKUP_DATE AS DATE) AS ORIGINAL_PO_REQUEST_DATE
	,	CAST(lpo.REQUEST_DATE AS DATE) AS REQUEST_DATE
	,	CAST(lpo.ORIGINAL_ETA_DATE AS DATE) AS ORIGINAL_PO_ETA_DATE
	,	CAST(lpo.EXPECT_DATE AS DATE) AS CURRENT_ETA_DATE
	,	lpo.TOTAL_UNITS
	,	lpo.TOTAL_WEIGHT AS PO_WEIGHT
	,	lpo.TOTAL_CUBES
	,	CEILING(lpo.TOTAL_PALLETS) AS TOTAL_PALLETS
	,	tv.REMIT_VENDOR AS LAWSON_NUMBER
	,	tv.VENDOR_NUMBER
	,	tv.NAME AS VENDOR_NAME
	,	COALESCE(tvf.ADDRESS1, tv.ADDRESS1) AS PO_ORIGIN_ADDRESS
	,	COALESCE(tvf.CITY, tv.CITY) AS PO_ORIGIN_CITY
	,	COALESCE(tvf.STATE, tv.STATE) AS PO_ORIGIN_STATE
	,	COALESCE(tvf.ZIP, tv.ZIP) AS PO_ORIGIN_ZIP
	,	lpo.DIS_WHS_ID
	,	DST_WHS.NAME AS PO_DESTINATION
	,	lpo.PROD_FRT  AS BOOKED_FREIGHT
	,	lpo.ALLOWANCE AS ALLOWANCE
	,	cast(null as decimal(10,3)) as FREIGHT_PAID_PO
	,	CAST(lpo.REC_DATE AS DATE) AS RECEIVE_DATE
	,	uc.week AS FISCAL_WEEK
	,	uc.Period AS FISCAL_PERIOD
	,	uc.FiscalYear AS FISCAL_YEAR
	,	lpo.SOURCE_SYSTEM AS SOURCE_SYSTEM
	,	tb.NAME AS BUYER_NAME
	,	ISNULL(lpo.PROD_FRT,0)+ABS(ISNULL(lpo.ALLOWANCE,0)) AS TOTAL_REVENUE
	,	CAST(NULL AS VARCHAR(20)) AS LOAD_ORIGIN_CITY
	,	CAST(NULL AS VARCHAR(2)) AS LOAD_ORIGIN_STATE
	,	CAST(NULL AS VARCHAR(10)) AS LOAD_ORIGIN_ZIP
	,	lpo.LO_PURCHASE_ORDER_ID
	INTO #POS
	FROM LO_PURCHASE_ORDERS lpo 
		INNER JOIN TMS_WHS AS DST_WHS  --PO DESTINATION
			ON DST_WHS.TMS_WHS_ID = lpo.DIS_WHS_ID
		LEFT JOIN tblUNFIfiscalCalendar uc 
			ON CAST(lpo.REC_DATE AS DATE) BETWEEN uc.WeekStart AND uc.WeekEnd
		LEFT JOIN LO_PO_LOADS lpl 
			ON lpo.LO_PURCHASE_ORDER_ID = lpl.LO_PURCHASE_ORDER_ID 
				AND (lpl.IS_DELETED IS NULL OR lpl.IS_DELETED = 0)
		LEFT JOIN dbo.TMS_VENDOR tv 
			ON lpo.TMS_VENDOR_ID = tv.TMS_VENDOR_ID
		LEFT JOIN dbo.TMS_VENDOR_FACILITY tvf 
			ON lpo.TMS_VENDOR_FACILITY_ID = tvf.TMS_VENDOR_FACILITY_ID
		LEFT JOIN dbo.TMS_BUYER tb 
			ON tb.TMS_BUYER_ID = lpo.TMS_BUYER		
	WHERE (CAST(REC_DATE AS DATE) BETWEEN @StarDate AND @EndDate)
		AND (@IncludeTransfers IS NULL OR (@IncludeTransfers = 0 AND ISNULL(tv.IS_TRANSFER_VENDOR,0) =0))
		AND (ISNULL(@LawsonNumber,'ALL') = 'ALL'
			OR tv.REMIT_VENDOR IN (SELECT i FROM dbo.fnParseStack(@LawsonNumber, 'I')))
		AND (ISNULL(@VendorNumber,'ALL') = 'ALL' 	OR tv.VENDOR_NUMBER IN (SELECT c
			FROM dbo.fnParseStack(@VendorNumber, 'C')))
		AND (@UNFI_DC IS NULL OR lpo.DIS_WHS_ID IN (SELECT i FROM dbo.fnSplitStringCTE(@UNFI_DC, ',')))
		AND lpo.TMS_STATUS_ID NOT IN (8)
		
		CREATE CLUSTERED INDEX #IX_POS ON #POS (LO_LOAD_NUMBER)
		CREATE INDEX #IDX_LPO ON #POS (LO_PURCHASE_ORDER_ID)		

		UPDATE #POS
		SET FREIGHT_PAID_PO = T.FREIGHT_PAID_PO
		FROM #TOTALS T
			INNER JOIN #POS P 
				ON P.LO_LOAD_NUMBER = T.LO_LOAD_NUMBER 
					AND P.LO_PURCHASE_ORDER_ID = T.LO_PURCHASE_ORDER_ID 

		--In case there is not SEQ_NUMBER = 1, we get the Min(SEQ_NUMBER) and set that one as Load-Origin
		;WITH CTE AS
		(
			SELECT ll.LO_LOAD_NUMBER, CITY ,ST,ZIP, MIN(SEQ_NUMBER) OVER(PARTITION BY LL.LO_LOAD_NUMBER, SEQ_NUMBER ORDER BY SEQ_NUMBER ASC)AS MIN_LOAD_STOP_RNK
			FROM #POS  ll
				INNER JOIN TMS_PC_MILER_HISTORY pcmh
					ON pcmh.LOAD_NUMBER = ll.LO_LOAD_NUMBER
						AND (pcmh.IS_DELETED IS NULL OR pcmh.IS_DELETED = 0)
		)
		UPDATE l
		SET LOAD_ORIGIN_CITY = c.CITY
			,LOAD_ORIGIN_STATE = c.ST
			,LOAD_ORIGIN_ZIP = c.ZIP
		FROM #POS l
			INNER JOIN CTE c
				ON  l.LO_LOAD_NUMBER = c.LO_LOAD_NUMBER
		WHERE MIN_LOAD_STOP_RNK = 1


		SELECT DISTINCT 		
			ll.LO_LOAD_NUMBER
		,	p.LO_PURCHASE_ORDER_ID
		,	cc.NAME AS LOAD_CARRIER
		,	CASE
				WHEN SOURCE_WHS.NAME IS NOT NULL AND
					CA.CR_RATE_ID IS NOT NULL
				THEN CAST(RATE.MODE + ' CROSS DOCK' AS VARCHAR(50))
				WHEN SOURCE_WHS.NAME IS NULL AND
					CA.CR_RATE_ID IS NOT NULL
				THEN CAST(RATE.MODE AS VARCHAR(50))
				WHEN ISNULL(cc.LTL_CARRIER, 0) = 1
				THEN 'LTL'
				WHEN ll.CR_CARRIER_ID IN (4541)--The only carrier that should be a Cross Dock Shuttle is JB Hunt DCS which is carrier_id = 4541
				THEN 'CROSS DOCK SHUTTLE'
				WHEN ll.DESTINATION_WHS_ID IN (22, 23, 20)
				THEN 'CONSOLIDATED'
				WHEN ll.CR_CARRIER_ID = 78
				THEN 'BACKHAUL'
				WHEN ll.LO_LOAD_NUMBER IS NULL THEN 'VSP'
				ELSE 'TL'
			END AS MODE
		,   CASE WHEN  ll.CR_CARRIER_ID = 78 AND  ll.SOURCE_WHS_ID IS NULL THEN  'YES' ELSE 'NO' END AS BACKHAUL_INDICATOR
		,	CASE WHEN ll.CR_CARRIER_ID = 78 AND ll.SOURCE_WHS_ID IS NULL AND CEILING(p.TOTAL_PALLETS) > 0 
					THEN CASE
							WHEN p.DIS_WHS_ID = ll.DESTINATION_WHS_ID
							THEN CEILING(p.TOTAL_PALLETS) * phr.BACKHAUL_RATE
							ELSE CEILING(p.TOTAL_PALLETS) * phr.CROSS_DOCK_RATE
						  END
				END AS BACKHAUL_EXPENSE_PO
		,LOAD_WHS_DEST.NAME AS LOAD_DESTINATION
		,su.USER_NAME AS LOAD_CREATED_BY
		,tmr.MASTER_ROUTE
		INTO #LOADS
		FROM  #POS p 	
			INNER JOIN LO_LOADS ll 
				ON p.LO_LOAD_NUMBER = ll.LO_LOAD_NUMBER
			INNER JOIN CR_CARRIERS cc 
					ON ll.CR_CARRIER_ID = cc.CR_CARRIER_ID
			LEFT JOIN TMS_MASTER_ROUTE tmr 
				ON ll.TMS_MASTER_ROUTE_ID = tmr.TMS_MASTER_ROUTE_ID
			LEFT JOIN TMS_WHS SOURCE_WHS 
				ON ll.SOURCE_WHS_ID = SOURCE_WHS.TMS_WHS_ID
			LEFT JOIN CR_AGREEMENT CA 
				ON ll.LO_LOAD_NUMBER = CA.LO_LOAD_NUMBER
					AND (CA.IS_DELETED IS NULL OR CA.IS_DELETED = 0 )
			LEFT JOIN CR_RATE RATE 
				ON CA.CR_RATE_ID = RATE.CR_RATE_ID
			LEFT JOIN TMS_WHS AS LOAD_WHS_DEST --LOAD DESTINATION
				ON LOAD_WHS_DEST.TMS_WHS_ID = ll.DESTINATION_WHS_ID			
			LEFT JOIN SEC_USERS su 
					ON ll.CREATED_BY = su.SEC_USERS_ID
			LEFT JOIN dbo.PALLET_HANDLING_RATE phr
			ON	p.FISCAL_YEAR = phr.[FISCAL_YEAR]
				AND p.SOURCE_SYSTEM = phr.SOURCE_SYSTEM
		
		CREATE INDEX #IDX_LOADS ON #LOADS (LO_LOAD_NUMBER, LO_PURCHASE_ORDER_ID)			
		
		SELECT p.PO_NUMBER
		,	p.LO_LOAD_NUMBER
		,	D_RTE
		,	PROTECTION_LEVEL
		,	ORIGINAL_PO_REQUEST_DATE
		,	REQUEST_DATE
		,	ORIGINAL_PO_ETA_DATE
		,	CURRENT_ETA_DATE
		,	TOTAL_UNITS
		,	PO_WEIGHT
		,	TOTAL_CUBES
		,	TOTAL_PALLETS
		,	LAWSON_NUMBER
		,	VENDOR_NUMBER
		,	VENDOR_NAME
		,	PO_ORIGIN_ADDRESS
		,	PO_ORIGIN_CITY
		,	PO_ORIGIN_STATE
		,	PO_ORIGIN_ZIP
		,	DIS_WHS_ID
		,	PO_DESTINATION
		,	BOOKED_FREIGHT
		,	ALLOWANCE
		,	FREIGHT_PAID_PO
		,	RECEIVE_DATE
		,	FISCAL_WEEK
		,	FISCAL_PERIOD
		,	FISCAL_YEAR
		,	SOURCE_SYSTEM
		,	BUYER_NAME
		,	TOTAL_REVENUE
		,	LOAD_ORIGIN_CITY
		,	LOAD_ORIGIN_STATE
		,	LOAD_ORIGIN_ZIP
		,   CASE WHEN BACKHAUL_INDICATOR IS NULL THEN 'NO' ELSE BACKHAUL_INDICATOR END AS BACKHAUL_INDICATOR
		,	CAST(BACKHAUL_EXPENSE_PO AS DECIMAL(10,3)) AS BACKHAUL_EXPENSE_PO
		,   LOAD_CARRIER, CASE WHEN p.LO_LOAD_NUMBER IS NULL THEN 'VSP' ELSE MODE END AS MODE, LOAD_DESTINATION, LOAD_CREATED_BY, MASTER_ROUTE
		,	CASE WHEN l.LO_LOAD_NUMBER IS NOT NULL AND l.LO_LOAD_NUMBER <> 0 THEN SUM(PO_WEIGHT) OVER(PARTITION BY l.LO_LOAD_NUMBER) END AS  LOAD_TOTAL_WEIGHT
		,	CASE WHEN l.LO_LOAD_NUMBER IS NOT NULL AND l.LO_LOAD_NUMBER <> 0 THEN SUM(TOTAL_CUBES) OVER(PARTITION BY l.LO_LOAD_NUMBER) END AS LOAD_TOTAL_CUBES
		,	CAST(ISNULL(FREIGHT_PAID_PO,0) / NULLIF(PO_WEIGHT,0) AS DECIMAL(10,3)) AS FREIGHT_PAID_LB
		,	CAST(ISNULL(TOTAL_REVENUE,0) /NULLIF(PO_WEIGHT,0) AS DECIMAL(10,3)) AS TOTAL_REVENUE_LB
		,	CAST(ISNULL(BACKHAUL_EXPENSE_PO,0) / NULLIF(PO_WEIGHT,0) AS decimal(10,3)) AS BACKHAUL_EXPENSE_LB
		,	CAST(ISNULL(FREIGHT_PAID_PO,0) + ISNULL(BACKHAUL_EXPENSE_PO,0) AS DECIMAL(10,3)) AS INBOUND_EXPENSE_PO
		,	CAST((ISNULL(FREIGHT_PAID_PO,0) + ISNULL(BACKHAUL_EXPENSE_PO,0)) / NULLIF(PO_WEIGHT,0) AS DECIMAL(10,3))  AS INBOUND_EXPENSE_LB
	FROM #POS p
		LEFT JOIN #LOADS l
			ON p.LO_LOAD_NUMBER = l.LO_LOAD_NUMBER
				AND p.LO_PURCHASE_ORDER_ID = l.LO_PURCHASE_ORDER_ID
		ORDER BY l.LO_LOAD_NUMBER 

	
	DROP TABLE #TOTALS
	DROP TABLE #POS
	DROP TABLE #LOADS
END




GO


