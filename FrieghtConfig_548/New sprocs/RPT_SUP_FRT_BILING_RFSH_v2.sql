USE [TMS]
GO

/****** Object:  StoredProcedure [dbo].[RPT_SUP_FRT_BILING_RFSH_v2]    Script Date: 7/12/2022 1:34:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/* ========================================================================================================
-- Author:		Johana Aleman
-- Create date: 04/05/2016
-- Description:	Returns the POs info that are fully Billed
-- Modification Log
-- 02/14/20     BK     Filter out all "Non-Revenue PO's"
   04/24/20		JL	   Fix filter for only include Revenue PO's
   05/22/20		JA	   Use the [dbo].[PALLET_HANDLING_RATE] table to get the direct PO =[BACKHAUL_RATE]
					   and Crossdock = [CROSS_DOCK_RATE]
   05/27/20     BK     Added ORDER_TYPE_DESCRIPTION & Commodity Code
-- ==========================================================================================================*/
ALTER PROCEDURE [dbo].[RPT_SUP_FRT_BILING_RFSH_v2]
(
	@SourceSystem	VARCHAR(255),
	@RecDateStart DATE --= '08/02/2015'
,	@RecDateEnd DATE --= '09/05/2015'
,	@Vendor VARCHAR(MAX) =NULL
,	@LawsonNumber VARCHAR(MAX) = 'ALL'
,	@SalesRegionIds	VARCHAR(MAX) =	NULL

) WITH RECOMPILE 
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

/***********************************************************************************************************
Example 1:	To return the POs that are fully Billed in 'USB' source system and include alsp all its vendors:
		EXEC dbo.RPT_SUP_FRT_BILING_RFSH_v2 'UBS','2015-08-02' , '2016-07-30' ,null, 'ALL'

Example 2: 	To return the POs that are fully Billed in 'WSB' source system and include alsp all its vendors:
		EXEC dbo.RPT_SUP_FRT_BILING_RFSH_v2 'wbs','12/06/2015' , '01/02/2016' ,null, 'ALL'
**********************************************************************************************************/
--Variable declarations
	DECLARE	@SourceSys	VARCHAR(255) = @SourceSystem
		,	@DateStart DATE = @RecDateStart
		,	@DateEnd DATE = @RecDateEnd
		,	@VendorNumber VARCHAR(MAX) = @Vendor
		,	@LawsonNum  VARCHAR(MAX) =  @LawsonNumber

BEGIN TRY      
	

	SELECT 	SALES_REGION_ID
	INTO #SALES_REGIONS
	FROM SALES_REGION 
	WHERE @SalesRegionIds IS NULL OR SALES_REGION_ID IN (SELECT i FROM dbo.fnParseStack(@SalesRegionIds, 'I') ps) 

	SELECT c 
	INTO #SOURCE_SYSTEMS
	From dbo.fnGetSourceSystemMultiSelect(@SourceSystem)

--To get the Suppliers PO expenses
	SELECT LO_PURCHASE_ORDER_ID, PO_NUMBER,   SUM(ISNULL(FREIGHT_PAID_PO,0)) AS FREIGHT_PAID_PO
	INTO #TOTALS
	FROM dbo.fnGetSuppliersPOExpenses(@DateStart, @DateEnd, 0, NULL) GROUP BY LO_PURCHASE_ORDER_ID,PO_NUMBER--,LO_LOAD_NUMBER
	
	CREATE CLUSTERED INDEX CLU_TOTPO ON #TOTALS (LO_PURCHASE_ORDER_ID)
--To get the POs that are NOT full Billed 
	SELECT * INTO #NOTFULLYBILLED FROM dbo.fnGetPO_NOTFULLYBILLED(@DateStart, @DateEnd, 0, NULL)
	CREATE CLUSTERED INDEX #NFBIDX ON #NOTFULLYBILLED (LO_PURCHASE_ORDER_ID)	

	SELECT lpo.* 
	INTO #LO_PURCHASE_ORDERS
	FROM LO_PURCHASE_ORDERS lpo 
		INNER JOIN #SOURCE_SYSTEMS s
			ON lpo.SOURCE_SYSTEM = s.c
		INNER JOIN #SALES_REGIONS sr
			ON lpo.SALES_REGION_ID = sr.SALES_REGION_ID
	WHERE (CAST(REC_DATE AS DATE) BETWEEN @DateStart AND @DateEnd)
		AND lpo.TMS_STATUS_ID = 9
		AND lpo.LO_PURCHASE_ORDER_ID NOT IN (SELECT LO_PURCHASE_ORDER_ID FROM #NOTFULLYBILLED )--Leave out The POs that are not fully billed
		AND REVENUE_TYPE = 'Revenue PO'

	CREATE CLUSTERED INDEX #IDX_PO ON #LO_PURCHASE_ORDERS(LO_PURCHASE_ORDER_ID)

	SELECT DISTINCT
		lpo.PO_NUMBER
	,	lpo.LO_PURCHASE_ORDER_ID
	,	lpo.DIS_WHS_ID
	,	lpo.TOTAL_WEIGHT AS PO_WEIGHT	
	,	lpo.TOTAL_UNITS
	,		(CASE
			WHEN lpo.FRZ_UNITS > 0
			THEN 'F'
			WHEN lpo.CHL_UNITS > 0
			THEN 'C'
			WHEN lpo.RPK_UNITS > 0
			THEN 'D'
			ELSE 'D'
		END) AS PROTECTION_LEVEL
	,	CEILING(lpo.TOTAL_PALLETS) AS TOTAL_PALLETS
	,	lpo.TOTAL_CUBES	
	,	lpo.D_RTE
	,	tv.NAME AS VENDOR_NAME
	,	tv.REMIT_VENDOR AS LAWSON_NUMBER
	,	tv.VENDOR_NUMBER
	,	COALESCE(tvf.ADDRESS1, tv.ADDRESS1) AS Address1
	,	COALESCE(tvf.CITY, tv.CITY) AS City
	,	COALESCE(tvf.STATE, tv.STATE) AS STATE
	,	COALESCE(tvf.ZIP, tv.ZIP) AS ZIP
	,	lpo.REC_DATE AS RECEIVE_DATE 
	,	ISNULL(lpo.PROD_FRT,0) + ABS(ISNULL(lpo.ALLOWANCE,0)) AS TOTAL_REVENUE	
	,	cast(CASE WHEN lpo.TOTAL_WEIGHT > 0 
				THEN (ISNULL(lpo.PROD_FRT,0) + ABS(ISNULL(lpo.ALLOWANCE,0))) / lpo.TOTAL_WEIGHT 
			ELSE 0 
	    END as decimal(20,6)) AS TOTAL_REVENUE_LB
	,	CASE WHEN SUM(CASE WHEN ll.CR_CARRIER_ID = 78 AND ll.SOURCE_WHS_ID IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY lpo.LO_PURCHASE_ORDER_ID) > 0  THEN 'Backhauled' ELSE NULL END  AS BACKHAUL_INDICATOR
	,	CAST(NULL AS DECIMAL(20,5)) AS BACKHAUL_EXPENSE_PO
	,	DST_WHS.NAME AS PO_DESTINATION
	,	(SELECT TOP 1 LOAD_DEST.NAME
			FROM LO_LOADS WITH(NOLOCK)
			INNER JOIN LO_PO_LOADS ON 
			LO_LOADS.LO_LOAD_NUMBER = LO_PO_LOADS.LO_LOAD_NUMBER AND ISNULL(LO_PO_LOADS.IS_DELETED, 0) = 0  
			INNER JOIN TMS_WHS LOAD_DEST WITH(NOLOCK)
			ON LOAD_DEST.TMS_WHS_ID = LO_LOADS.DESTINATION_WHS_ID
			WHERE 
			LO_PURCHASE_ORDER_ID = lpo.LO_PURCHASE_ORDER_ID AND 
			LO_LOADS.CR_CARRIER_ID = 78) AS LOAD_DESTINATION
	,	CAST(NULL AS INT) AS LOAD_COUNT
	,	CAST(NULL AS INT) AS BILL_COUNT
	,	ISNULL(lpo.PROD_FRT,0) AS BOOKED_FREIGHT
	,	ISNULL(lpo.ALLOWANCE,0) AS ALLOWANCE
	,	alt_rte_1
	,	CASE WHEN lpl.LO_PO_LOADS_ID IS NULL THEN 'VSP'
		ELSE 'COLLECT'
		END AS PO_TYPE			
	,	CAST(ISNULL(#TOTALS.FREIGHT_PAID_PO,0) as decimal(20,4)) AS TOTAL_FREIGHT_PAID_PO
	,	cast(CASE WHEN lpo.TOTAL_WEIGHT > 0 THEN ISNULL(#TOTALS.FREIGHT_PAID_PO,0) / lpo.TOTAL_WEIGHT ELSE 0 END as decimal(20,6)) AS TOTAL_FREIGHT_PAID_LB
	,	tb.NAME AS BUYER_NAME
	,	vsr.SALES_REGION_NAME AS SALES_REGION
	,	lpo.SOURCE_SYSTEM
	,   CC.COMMODITY_CODE_DESCRIPTION
	,   OT.ORDER_TYPE_DESCRIPTION
	INTO #POS
	 FROM #LO_PURCHASE_ORDERS lpo 
		LEFT JOIN #TOTALS 
			ON lpo.LO_PURCHASE_ORDER_ID = #TOTALS.LO_PURCHASE_ORDER_ID
		INNER JOIN [dbo].[SALES_REGION] vsr  
			ON  lpo.SALES_REGION_ID = vsr.SALES_REGION_ID  
		LEFT JOIN LO_PO_LOADS lpl 
				ON lpo.LO_PURCHASE_ORDER_ID = lpl.LO_PURCHASE_ORDER_ID 
					AND ISNULL(lpl.IS_DELETED, 0) = 0
		LEFT JOIN LO_LOADS ll 
				ON lpl.LO_LOAD_NUMBER = ll.LO_LOAD_NUMBER
		LEFT JOIN dbo.TMS_VENDOR tv 
				ON lpo.TMS_VENDOR_ID = tv.TMS_VENDOR_ID
		LEFT JOIN dbo.TMS_VENDOR_FACILITY tvf 
				ON lpo.TMS_VENDOR_FACILITY_ID = tvf.TMS_VENDOR_FACILITY_ID
		LEFT JOIN TMS_WHS AS DST_WHS  --PO DESTINATION
				ON DST_WHS.TMS_WHS_ID = lpo.DIS_WHS_ID
		LEFT JOIN dbo.TMS_BUYER tb 
				ON tb.TMS_BUYER_ID = lpo.TMS_BUYER
		LEFT JOIN BL_BILL_POS bbp WITH(NOLOCK)
			ON lpo.LO_PURCHASE_ORDER_ID = bbp.LO_PURCHASE_ORDER_ID
			AND bbp.LO_LOAD_NUMBER = ll.LO_LOAD_NUMBER
			AND ISNULL(bbp.IS_DELETED, 0) = 0
		LEFT JOIN COMMODITY_CODES CC
			ON lpo.COMMODITY_CODE_ID = CC.COMMODITY_CODE_ID
				AND (CC.IS_DELETED = 0 OR CC.IS_DELETED IS NULL)
		LEFT JOIN ORDER_TYPES OT
			ON OT.ORDER_TYPE_ID = lpo.ORDER_TYPE_ID
	WHERE (@VendorNumber IS NULL
			OR tv.VENDOR_NUMBER IN (SELECT c
			FROM dbo.fnParseStack(@VendorNumber, 'C')))
		AND (ll.LO_LOAD_NUMBER is null OR ll.CR_CARRIER_ID = 78 OR bbp.BL_BILLING_ID IS NOT NULL)
		AND (isnull(@LawsonNum, 'ALL') = 'ALL' OR tv.REMIT_VENDOR IN (SELECT I FROM dbo.fnParseStack(@LawsonNum, 'I')))

		CREATE CLUSTERED INDEX #IX_LPO ON #POS (LO_PURCHASE_ORDER_ID)

		;WITH CTE AS(
			SELECT LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID, isnull(COUNT(DISTINCT LO_LOADS.LO_LOAD_NUMBER),0) AS LOAD_COUNT  
			FROM #POS LO_PURCHASE_ORDERS  
				INNER JOIN LO_PO_LOADS  ON 
					LO_PO_LOADS.LO_PURCHASE_ORDER_ID = LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID 
				INNER JOIN LO_LOADS ON 
					LO_PO_LOADS.LO_LOAD_NUMBER = LO_LOADS.LO_LOAD_NUMBER 
				WHERE ISNULL(LO_PO_LOADS.IS_DELETED, 0) = 0 AND 
					LO_LOADS.CR_CARRIER_ID <> 78
			GROUP BY LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID
		)

		UPDATE #POS
		SET LOAD_COUNT = cte.LOAD_COUNT
		FROM CTE INNER JOIN #POS p
			ON cte.LO_PURCHASE_ORDER_ID = p.LO_PURCHASE_ORDER_ID

	;WITH CTE AS(
		SELECT LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID, isnull(COUNT(DISTINCT BL_BILLING_ID),0) AS BILL_COUNT
		FROM #POS LO_PURCHASE_ORDERS  
			INNER JOIN BL_BILL_POS 
				ON BL_BILL_POS.LO_PURCHASE_ORDER_ID = LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID 
					AND ISNULL(BL_BILL_POS.IS_DELETED, 0) = 0 
		GROUP BY LO_PURCHASE_ORDERS.LO_PURCHASE_ORDER_ID 
	) 
	UPDATE #POS
		SET BILL_COUNT = cte.BILL_COUNT
		FROM CTE INNER JOIN #POS p
			ON cte.LO_PURCHASE_ORDER_ID = p.LO_PURCHASE_ORDER_ID

		UPDATE #POS
		SET BACKHAUL_EXPENSE_PO = CASE WHEN CEILING(p.TOTAL_PALLETS) > 0 
					THEN CASE
							WHEN p.DIS_WHS_ID = ll.DESTINATION_WHS_ID
							THEN CEILING(p.TOTAL_PALLETS) * [BACKHAUL_RATE]
							ELSE CEILING(p.TOTAL_PALLETS) * [CROSS_DOCK_RATE]
						  END end
		FROM  #POS p 
			INNER JOIN LO_PO_LOADS lpl 
				ON p.LO_PURCHASE_ORDER_ID = lpl.LO_PURCHASE_ORDER_ID 
					AND ISNULL(lpl.IS_DELETED, 0) = 0
			INNER JOIN LO_LOADS ll 
				ON lpl.LO_LOAD_NUMBER = ll.LO_LOAD_NUMBER
				AND ll.CR_CARRIER_ID = 78 AND ll.SOURCE_WHS_ID IS NULL
			LEFT JOIN dbo.tblUNFIfiscalCalendar uc
				ON cast(p.RECEIVE_DATE as date) BETWEEN uc.WeekStart AND uc.WeekEnd
			LEFT JOIN dbo.PALLET_HANDLING_RATE phr
				ON	uc.FiscalYear = phr.[FISCAL_YEAR]
					AND P.SOURCE_SYSTEM = phr.SOURCE_SYSTEM

		
		SELECT l.* 
			,cast(case when po_weight > 0 then ISNULL(BACKHAUL_EXPENSE_PO,0) / po_weight else 0  end  as decimal(20,6)) as BACKHAUL_EXPENSE_LB
			,CAST(ISNULL(BACKHAUL_EXPENSE_PO,0) + isnull(TOTAL_FREIGHT_PAID_PO, 0) AS DECIMAL(20,4)) as TOTAL_INBOUND_EXPENSE_PO
			,cast(case when po_weight > 0 then (ISNULL(BACKHAUL_EXPENSE_PO,0) / po_weight) else 0  end + isnull(TOTAL_FREIGHT_PAID_LB, 0) as decimal(20,6)) as TOTAL_INBOUND_EXPENSE_LB
			,cast(ISNULL(TOTAL_REVENUE,0) - (ISNULL(BACKHAUL_EXPENSE_PO,0) + isnull(TOTAL_FREIGHT_PAID_PO, 0) ) as decimal(20,4))as UNFI_INBOUND_PROFITABILITY_PO
			,cast(ISNULL(TOTAL_REVENUE_LB,0) - ((case when po_weight > 0 then ISNULL(BACKHAUL_EXPENSE_PO,0) / po_weight else 0  end )+ isnull(TOTAL_FREIGHT_PAID_LB, 0)) as decimal(20,6)) as UNFI_INBOUND_PROFITABILITY_LB
		FROM #POS l
		ORDER BY PO_NUMBER		
		
	DROP TABLE IF EXISTS #LO_PURCHASE_ORDERS	
	DROP TABLE IF EXISTS #TOTALS
	DROP TABLE IF EXISTS #POS
	DROP TABLE IF EXISTS #NOTFULLYBILLED
	DROP TABLE IF EXISTS #SALES_REGIONS
	DROP TABLE IF EXISTS #SOURCE_SYSTEMS
	
END TRY      
BEGIN CATCH      
INSERT INTO [dbo].[DB_Errors]      
 VALUES (NEWID(), SUSER_SNAME(), ERROR_NUMBER(), ERROR_STATE(), ERROR_SEVERITY(), ERROR_LINE(), ERROR_PROCEDURE(), ERROR_MESSAGE(), GETDATE());      
END CATCH 	

END

GO


