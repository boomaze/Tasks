USE [TMS]
GO

/****** Object:  StoredProcedure [dbo].[SP_RPT_BUDGET_DASHBOARD]    Script Date: 7/12/2022 1:40:10 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/* =============================================
   Author:		Richard Bailey
   Create date: 2/29/2016
   Description:	EXEC SP_RPT_BUDGET_DASHBOARD 2016,4,0,0,1
 
 Modification Log:

 20200121				  Modified logic to utilize the IS_TRANSFER_VENDOR field 
									in the [dbo].[TMS_VENDOR] table when selecting 
									Transfer Vendors.						
 20200526	 JAleman	  Use the [dbo].[PALLET_HANDLING_RATE] table to get the direct PO =[BACKHAUL_RATE]
						  and Crossdock = [CROSS_DOCK_RATE]
============================================================================================================*/
ALTER PROCEDURE [dbo].[SP_RPT_BUDGET_DASHBOARD]
(
	@FiscalYear INT
,	@FiscalPeriod INT
,	@EastAccrual DECIMAL(18, 2) = 0
,	@WestAccrual DECIMAL(18, 2) = 0
,	@AlbertsAccrual DECIMAL(18, 2) = 0
,	@TonysAccrual DECIMAL(18, 2) = 0
,	@TMWAccrual DECIMAL(18, 2) = 0
,	@FirstOrLastForecast BIT = 1
,	@SourceSystem VARCHAR(50) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;
	SET FMTONLY OFF
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE	@StartDate DATE
		,	@EndDate DATE
		,	@Today DATE = GETDATE()
		,	@TotalWeeks INT
		,	@WeeksToForecast INT = 0
		,	@PreviousStartDate DATE
		,	@PreviousEndDate DATE

	SELECT
		@StartDate = MIN(uc.WeekStart)
	,	@EndDate = MAX(CASE
			WHEN uc.WeekEnd < @Today
			THEN uc.WeekEnd
			ELSE NULL
		END)
	,	@TotalWeeks = MAX(uc.week)
	,	@WeeksToForecast = ISNULL((MAX(uc.week) - MIN(CASE
			WHEN @Today BETWEEN uc.WeekStart AND uc.WeekEnd
			THEN uc.week
			ELSE NULL
		END)) + 1, 0)
	FROM tblUNFIfiscalCalendar uc
	WHERE
		uc.FiscalYear = @FiscalYear
		AND uc.Period = @FiscalPeriod

	SELECT
		@PreviousStartDate = MIN(uc.WeekStart)
	,	@PreviousEndDate = MAX(uc.WeekEnd)

	FROM tblUNFIfiscalCalendar uc
	WHERE
		uc.FiscalYear = @FiscalYear - 1
		AND uc.Period = @FiscalPeriod

	IF (@FirstOrLastForecast IS NULL)
		SET @FirstOrLastForecast = 1
		
	
	SELECT c 
	INTO #SOURCE_SYSTEMS
	From dbo.fnGetSourceSystemMultiSelect(@SourceSystem)



	PRINT 'Startdate:'
	PRINT @StartDate
	PRINT 'Enddate'
	PRINT @EndDate
	PRINT 'Total Weeks'
	PRINT @TotalWeeks
	PRINT 'Weeks to forecast'
	PRINT @WeeksToForecast


	CREATE TABLE #PO_LOADS (
		PO_NUMBER VARCHAR(50)
	,	SOURCE_SYSTEM VARCHAR(50)
	,	REC_DATE DATETIME
	,	po_weight DECIMAL(10, 3)
	,	FiscalYear INT
	,	Period INT
	,	quarter INT
	,	PROD_FRT DECIMAL(10, 3)
	,	ALLOWANCE DECIMAL(10, 3)
	,	BL_BILLING_ID BIGINT
	,	LO_LOAD_NUMBER BIGINT
	,	BILLED_EXPENSE DECIMAL(38, 19)
	,	BACKHAUL_EXPENSE NUMERIC
	,	UNBILLED_EXPENSE DECIMAL(38, 20)
	,	VSP_LBS DECIMAL(10, 3)
	,	COLLECT_LBS DECIMAL(10, 3)
	,	PO_RANK BIGINT
	,	IS_TRANSFER BIT
	)

	SELECT DISTINCT
		LO_LOAD_NUMBER
	INTO #NFB
	FROM (SELECT gpn.LO_LOAD_NUMBER

			FROM dbo.fnGetPO_NOTFULLYBILLED(@StartDate, @EndDate) gpn
			UNION ALL
			SELECT gpn.LO_LOAD_NUMBER
			FROM dbo.fnGetPO_NOTFULLYBILLED(@PreviousStartDate, @PreviousEndDate) gpn) D

	CREATE CLUSTERED INDEX idx_nfb_ids ON #NFB (LO_LOAD_NUMBER)


	--Delete the loads that are fullyBilled to have only the NotFullyBilled Loads
	DELETE FROM #NFB
	WHERE LO_LOAD_NUMBER IN (SELECT LO_PO_LOADS.LO_LOAD_NUMBER
			FROM BL_BILL_POS WITH (NOLOCK)
				INNER JOIN LO_PO_LOADS WITH (NOLOCK)
						ON BL_BILL_POS.LO_PURCHASE_ORDER_ID = LO_PO_LOADS.LO_PURCHASE_ORDER_ID
							AND BL_BILL_POS.LO_LOAD_NUMBER = LO_PO_LOADS.LO_LOAD_NUMBER
				INNER JOIN BL_BILLING WITH (NOLOCK)
						ON BL_BILL_POS.BL_BILLING_ID = BL_BILLING.BL_BILLING_ID
							AND BL_BILLING.CR_CARRIER_ID <> '66'
							AND BL_BILLING.CR_CARRIER_ID IS NOT NULL
							AND BL_BILLING.INVOICE_AMOUNT > 0
							AND ISNULL(LO_PO_LOADS.IS_DELETED, 0) = 0
							AND ISNULL(BL_BILL_POS.IS_DELETED, 0) = 0)

	--Redo invoice weight
	INSERT INTO #PO_LOADS (PO_NUMBER, SOURCE_SYSTEM, REC_DATE, po_weight, FiscalYear, Period, quarter, PROD_FRT, ALLOWANCE, BL_BILLING_ID, LO_LOAD_NUMBER, BILLED_EXPENSE, BACKHAUL_EXPENSE, /*UNBILLED_EXPENSE,*/ VSP_LBS, COLLECT_LBS, PO_RANK, IS_TRANSFER)
		SELECT
			PO_NUMBER
		,	lpo.SOURCE_SYSTEM
		,	lpo.REC_DATE
		,	lpo.TOTAL_WEIGHT AS po_weight
		,	uc.FiscalYear
		,	uc.Period
		,	uc.quarter
		,	lpo.PROD_FRT
		,	lpo.ALLOWANCE
		,	bb.BL_BILLING_ID
		,	ll.LO_LOAD_NUMBER
		,	CASE
				WHEN SUM(lpo.TOTAL_WEIGHT) OVER (PARTITION BY bb.BL_BILLING_ID) > 0
				THEN lpo.TOTAL_WEIGHT / (SELECT SUM(TOTAL_WEIGHT)
						FROM LO_PURCHASE_ORDERS lpo2
							INNER JOIN BL_BILL_POS bbp2
									ON lpo2.LO_PURCHASE_ORDER_ID = bbp2.LO_PURCHASE_ORDER_ID
										AND ISNULL(bbp2.IS_DELETED, 0) = 0
						WHERE bbp2.BL_BILLING_ID = bb.BL_BILLING_ID) * bb.INVOICE_AMOUNT
				ELSE 0
			END AS BILLED_EXPENSE
		,	CASE
				WHEN ll.CR_CARRIER_ID = 78 AND
					ll.SOURCE_WHS_ID IS NULL
				THEN CASE
						WHEN lpo.DIS_WHS_ID = ll.DESTINATION_WHS_ID
						THEN CEILING(lpo.TOTAL_PALLETS) * phr.BACKHAUL_RATE
						ELSE CEILING(lpo.TOTAL_PALLETS) * phr.CROSS_DOCK_RATE
					END
			END AS BACKHAUL_EXPENSE
		,	CASE
				WHEN ll.LO_LOAD_NUMBER IS NULL
				THEN lpo.TOTAL_WEIGHT
				ELSE 0
			END AS VSP_LBS
		,	CASE
				WHEN ll.LO_LOAD_NUMBER IS NOT NULL AND
					RANK() OVER (PARTITION BY lpo.PO_NUMBER ORDER BY bb.LO_LOAD_NUMBER, NEWID()) = 1
				THEN lpo.TOTAL_WEIGHT
				ELSE 0
			END AS COLLECT_LBS
		,	RANK() OVER (PARTITION BY PO_NUMBER ORDER BY NEWID()) AS PO_RANK
		,	CASE
				WHEN isnull(tv.IS_TRANSFER_VENDOR,0) =0
				THEN 0 --No a transfer
				WHEN tv.IS_TRANSFER_VENDOR = 1
				THEN 1
				ELSE NULL
			END AS IS_TRANSFER
		FROM LO_PURCHASE_ORDERS lpo WITH (NOLOCK)
			LEFT JOIN tblUNFIfiscalCalendar uc WITH (NOLOCK)
					ON CAST(lpo.REC_DATE AS DATE) BETWEEN uc.WeekStart AND uc.WeekEnd
			LEFT JOIN LO_PO_LOADS lpl WITH (NOLOCK)
					ON lpo.LO_PURCHASE_ORDER_ID = lpl.LO_PURCHASE_ORDER_ID
						AND ISNULL(lpl.IS_DELETED, 0) = 0
			LEFT JOIN LO_LOADS ll WITH (NOLOCK)
					ON lpl.LO_LOAD_NUMBER = ll.LO_LOAD_NUMBER
			LEFT JOIN BL_BILL_POS bbp WITH (NOLOCK)
					ON lpo.LO_PURCHASE_ORDER_ID = bbp.LO_PURCHASE_ORDER_ID
						AND ll.LO_LOAD_NUMBER = bbp.LO_LOAD_NUMBER
						AND ISNULL(bbp.IS_DELETED, 0) = 0
						AND ll.CR_CARRIER_ID NOT IN (78, 1680, 2629, 69, 2616, 3122)
			LEFT JOIN BL_BILLING bb WITH (NOLOCK)
					ON bbp.BL_BILLING_ID = bb.BL_BILLING_ID
			LEFT JOIN CR_AGREEMENT ca WITH (NOLOCK)
					ON ll.LO_LOAD_NUMBER = ca.LO_LOAD_NUMBER
						AND ISNULL(ca.IS_DELETED, 0) = 0
			LEFT JOIN TMS_VENDOR tv WITH (NOLOCK)
					ON lpo.TMS_VENDOR_ID = tv.TMS_VENDOR_ID
			LEFT JOIN dbo.PALLET_HANDLING_RATE phr
				ON	uc.FiscalYear = phr.[FISCAL_YEAR]
					AND lpo.SOURCE_SYSTEM = phr.SOURCE_SYSTEM
		WHERE lpo.TMS_STATUS_ID = 9
			AND (CAST(REC_DATE AS DATE) BETWEEN @StartDate AND @EndDate
				OR CAST(REC_DATE AS DATE) BETWEEN @PreviousStartDate AND @PreviousEndDate)




	CREATE CLUSTERED INDEX IDX_CLU_PODTA ON #PO_LOADS (SOURCE_SYSTEM, FiscalYear, Period)

	CREATE TABLE #FORECAST (
		BUDGET_YEAR INT
	,	BUDGET_PERIOD INT
	,	SOURCE_SYSTEM VARCHAR(10)
	,	BUDGET_COLLECT_LBS DECIMAL(18, 2)
	,	BUDGET_VSP_LBS DECIMAL(18, 2)
	,	BUDGET_BOOKED_FREIGHT DECIMAL(18, 2)
	,	BUDGET_ALLOWANCE DECIMAL(18, 2)
	,	BUDGET_TENDERED_EXPENSE DECIMAL(18, 2)--This value is stored in the table BL_BUDGET_DATA as BUDGET_EXPENSE 
	,	BUDGET_EXPENSE AS CAST(BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE AS DECIMAL(18, 2))
	,	BUDGET_INCOME AS CAST(BUDGET_BOOKED_FREIGHT - (BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE) AS DECIMAL(18, 2))
	,	FORECAST_COLLECT_LBS DECIMAL(18, 2)
	,	FORECAST_VSP_LBS DECIMAL(18, 2)
	,	FORECAST_BOOKED_FREIGHT DECIMAL(18, 2)
	,	FORECAST_ALLOWANCE DECIMAL(18, 2)
	,	FORECAST_TENDERED_EXPENSE DECIMAL(18, 2)
	,	FORECAST_EXPENSE AS CAST(FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE AS DECIMAL(18, 2))
	,	FORECAST_INCOME AS CAST(FORECAST_BOOKED_FREIGHT - (FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE) AS DECIMAL(18, 2))
	,	ACTUAL_EAST_ALLOWANCE DECIMAL(18, 2)
	)

	INSERT INTO #FORECAST (BUDGET_YEAR, BUDGET_PERIOD, SOURCE_SYSTEM, BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME,*/ ACTUAL_EAST_ALLOWANCE)
		SELECT TOP 1
			BUDGET_YEAR
		,	BUDGET_PERIOD
		,	SOURCE_SYSTEM
		,	BUDGET_COLLECT_LBS
		,	BUDGET_VSP_LBS
		,	BUDGET_BOOKED_FREIGHT
		,	BUDGET_ALLOWANCE
		,	BUDGET_EXPENSE
			--,	BUDGET_INCOME this is a claculated column BUDGET_BOOKED_FREIGHT - (BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE)
		,	FORECAST_COLLECT_LBS
		,	FORECAST_VSP_LBS
		,	FORECAST_BOOKED_FREIGHT
		,	FORECAST_ALLOWANCE
		,	FORECAST_EXPENSE
			--,	FORECAST_INCOME this is a claculated column FORECAST_BOOKED_FREIGHT - (FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE)
		,	ACTUAL_EAST_ALLOWANCE
		FROM BL_BUDGET_DATA WITH (NOLOCK)
		WHERE
			BUDGET_YEAR = @FiscalYear
			AND BUDGET_PERIOD = @FiscalPeriod
			AND SOURCE_SYSTEM = 'ubs'
		ORDER BY	CASE
						WHEN @FirstOrLastForecast = 1
						THEN CREATED_DATE
						ELSE ''
					END ASC
				,	CASE
						WHEN @FirstOrLastForecast = 0
						THEN CREATED_DATE
						ELSE ''
					END DESC

	INSERT INTO #FORECAST (BUDGET_YEAR, BUDGET_PERIOD, SOURCE_SYSTEM, BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME,*/ ACTUAL_EAST_ALLOWANCE)
		SELECT TOP 1
			BUDGET_YEAR
		,	BUDGET_PERIOD
		,	SOURCE_SYSTEM
		,	BUDGET_COLLECT_LBS
		,	BUDGET_VSP_LBS
		,	BUDGET_BOOKED_FREIGHT
		,	BUDGET_ALLOWANCE
		,	BUDGET_EXPENSE
			--,	BUDGET_INCOME
		,	FORECAST_COLLECT_LBS
		,	FORECAST_VSP_LBS
		,	FORECAST_BOOKED_FREIGHT
		,	FORECAST_ALLOWANCE
		,	FORECAST_EXPENSE
			--,	FORECAST_INCOME
		,	ACTUAL_EAST_ALLOWANCE
		FROM BL_BUDGET_DATA WITH (NOLOCK)
		WHERE
			BUDGET_YEAR = @FiscalYear
			AND BUDGET_PERIOD = @FiscalPeriod
			AND SOURCE_SYSTEM = 'WBS'
		ORDER BY	CASE
						WHEN @FirstOrLastForecast = 1
						THEN CREATED_DATE
						ELSE ''
					END ASC
				,	CASE
						WHEN @FirstOrLastForecast = 0
						THEN CREATED_DATE
						ELSE ''
					END DESC

	INSERT INTO #FORECAST (BUDGET_YEAR, BUDGET_PERIOD, SOURCE_SYSTEM, BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME,*/ ACTUAL_EAST_ALLOWANCE)
		SELECT TOP 1
			BUDGET_YEAR
		,	BUDGET_PERIOD
		,	SOURCE_SYSTEM
		,	BUDGET_COLLECT_LBS
		,	BUDGET_VSP_LBS
		,	BUDGET_BOOKED_FREIGHT
		,	BUDGET_ALLOWANCE
		,	BUDGET_EXPENSE
			--,	BUDGET_INCOME
		,	FORECAST_COLLECT_LBS
		,	FORECAST_VSP_LBS
		,	FORECAST_BOOKED_FREIGHT
		,	FORECAST_ALLOWANCE
		,	FORECAST_EXPENSE
			--,	FORECAST_INCOME
		,	ACTUAL_EAST_ALLOWANCE
		FROM BL_BUDGET_DATA WITH (NOLOCK)
		WHERE
			BUDGET_YEAR = @FiscalYear
			AND BUDGET_PERIOD = @FiscalPeriod
			AND SOURCE_SYSTEM = 'TFF'
		ORDER BY	CASE
						WHEN @FirstOrLastForecast = 1
						THEN CREATED_DATE
						ELSE ''
					END ASC
				,	CASE
						WHEN @FirstOrLastForecast = 0
						THEN CREATED_DATE
						ELSE ''
					END DESC

	INSERT INTO #FORECAST (BUDGET_YEAR, BUDGET_PERIOD, SOURCE_SYSTEM, BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME,*/ ACTUAL_EAST_ALLOWANCE)
		SELECT TOP 1
			BUDGET_YEAR
		,	BUDGET_PERIOD
		,	SOURCE_SYSTEM
		,	BUDGET_COLLECT_LBS
		,	BUDGET_VSP_LBS
		,	BUDGET_BOOKED_FREIGHT
		,	BUDGET_ALLOWANCE
		,	BUDGET_EXPENSE
			--,	BUDGET_INCOME
		,	FORECAST_COLLECT_LBS
		,	FORECAST_VSP_LBS
		,	FORECAST_BOOKED_FREIGHT
		,	FORECAST_ALLOWANCE
		,	FORECAST_EXPENSE
			--,	FORECAST_INCOME
		,	ACTUAL_EAST_ALLOWANCE
		FROM BL_BUDGET_DATA WITH (NOLOCK)
		WHERE
			BUDGET_YEAR = @FiscalYear
			AND BUDGET_PERIOD = @FiscalPeriod
			AND SOURCE_SYSTEM = 'ALB'
		ORDER BY	CASE
						WHEN @FirstOrLastForecast = 1
						THEN CREATED_DATE
						ELSE ''
					END ASC
				,	CASE
						WHEN @FirstOrLastForecast = 0
						THEN CREATED_DATE
						ELSE ''
					END DESC

		INSERT INTO #FORECAST (BUDGET_YEAR, BUDGET_PERIOD, SOURCE_SYSTEM, BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME,*/ ACTUAL_EAST_ALLOWANCE)
		SELECT TOP 1
			BUDGET_YEAR
		,	BUDGET_PERIOD
		,	SOURCE_SYSTEM
		,	BUDGET_COLLECT_LBS
		,	BUDGET_VSP_LBS
		,	BUDGET_BOOKED_FREIGHT
		,	BUDGET_ALLOWANCE
		,	BUDGET_EXPENSE
			--,	BUDGET_INCOME
		,	FORECAST_COLLECT_LBS
		,	FORECAST_VSP_LBS
		,	FORECAST_BOOKED_FREIGHT
		,	FORECAST_ALLOWANCE
		,	FORECAST_EXPENSE
			--,	FORECAST_INCOME
		,	ACTUAL_EAST_ALLOWANCE
		FROM BL_BUDGET_DATA WITH (NOLOCK)
		WHERE
			BUDGET_YEAR = @FiscalYear
			AND BUDGET_PERIOD = @FiscalPeriod
			AND SOURCE_SYSTEM = 'TMW'
		ORDER BY	CASE
						WHEN @FirstOrLastForecast = 1
						THEN CREATED_DATE
						ELSE ''
					END ASC
				,	CASE
						WHEN @FirstOrLastForecast = 0
						THEN CREATED_DATE
						ELSE ''
					END DESC


	CREATE TABLE #SUBTOTAL (
		REGION VARCHAR(50)
	,	BOOKED_FREIGHT DECIMAL(38, 3)
	,	ALLOWANCE DECIMAL(38, 3)
	,	FREIGHT_TENDERED_EXPENSE DECIMAL(38, 3)
	,	FREIGHT_EXPENSE AS CAST(FREIGHT_TENDERED_EXPENSE + ALLOWANCE AS DECIMAL(18, 2))
	,	FREIGHT_INCOME AS CAST(BOOKED_FREIGHT - (FREIGHT_TENDERED_EXPENSE + ALLOWANCE) AS DECIMAL(18, 2))
	,	FREIGHT_MARGIN AS CAST(ISNULL(BOOKED_FREIGHT - (FREIGHT_TENDERED_EXPENSE + ALLOWANCE), 0) / NULLIF(BOOKED_FREIGHT, 0) AS DECIMAL(38, 4))
	,	COLLECT_LBS DECIMAL(38, 3)
	,	VSP_LBS DECIMAL(38, 3)
	,	TOTAL_LBS DECIMAL(38, 3)
	,	PERCENT_COLLECT DECIMAL(38, 6)
	,	FORECAST_BOOKED_FREIGHT DECIMAL(18, 2)
	,	FORECAST_ALLOWANCE DECIMAL(18, 2)
	,	FORECAST_TENDERED_EXPENSE DECIMAL(18, 2)
	,	FORECAST_EXPENSE AS CAST(FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE AS DECIMAL(18, 2))
	,	FORECAST_INCOME AS CAST(FORECAST_BOOKED_FREIGHT - (FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE) AS DECIMAL(18, 2))
	,	FORECAST_MARGIN AS CAST(ISNULL(FORECAST_BOOKED_FREIGHT - (FORECAST_TENDERED_EXPENSE + FORECAST_ALLOWANCE), 0) / NULLIF(FORECAST_BOOKED_FREIGHT, 0) AS DECIMAL(38, 4))
	,	FORECAST_COLLECT_LBS DECIMAL(18, 2)
	,	FORECAST_VSP_LBS DECIMAL(18, 2)
	,	FORECAST_TOTAL_LBS DECIMAL(19, 2)
	,	FORECAST_PERCENT_COLLECT DECIMAL(38, 20)
	,	FORECAST_BOOKED_FREIGHT_PER_LB DECIMAL(38, 20)
	,	FORECAST_FREIGHT_EXPENSE_PER_LB DECIMAL(38, 19)
	,	FORECAST_FREIGHT_INCOME_PER_LB DECIMAL(38, 19)
	,	BUDGET_BOOKED_FREIGHT DECIMAL(18, 2)
	,	BUDGET_ALLOWANCE DECIMAL(18, 2)
	,	BUDGET_TENDERED_EXPENSE DECIMAL(18, 2)
	,	BUDGET_EXPENSE AS CAST(BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE AS DECIMAL(18, 2))
	,	BUDGET_INCOME AS CAST(BUDGET_BOOKED_FREIGHT - (BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE) AS DECIMAL(18, 2))
	,	BUDGET_MARGIN AS CAST(ISNULL(BUDGET_BOOKED_FREIGHT - (BUDGET_TENDERED_EXPENSE + BUDGET_ALLOWANCE), 0) / NULLIF(BUDGET_BOOKED_FREIGHT, 0) AS DECIMAL(38, 4))
	,	BUDGET_COLLECT_LBS DECIMAL(18, 2)
	,	BUDGET_VSP_LBS DECIMAL(18, 2)
	,	BUDGET_TOTAL_LBS DECIMAL(19, 2)
	,	BUDGET_PERCENT_COLLECT DECIMAL(38, 20)
	,	BUDGET_BOOKED_FREIGHT_PER_LB DECIMAL(38, 20)
	,	BUDGET_FREIGHT_EXPENSE_PER_LB DECIMAL(38, 19)
	,	BUDGET_FREIGHT_INCOME_PER_LB DECIMAL(38, 19)
	,	Period INT
	,	FiscalYear INT
	)


	INSERT INTO #SUBTOTAL (REGION, BOOKED_FREIGHT, ALLOWANCE, FREIGHT_TENDERED_EXPENSE, /*FREIGHT_INCOME, FREIGHT_MARGIN,*/ COLLECT_LBS, VSP_LBS, TOTAL_LBS, PERCENT_COLLECT, /*BOOKED_FREIGHT_PER_LB, FREIGHT_EXPENSE_PER_LB, FREIGHT_INCOME_PER_LB,*/ FORECAST_BOOKED_FREIGHT, FORECAST_ALLOWANCE, FORECAST_TENDERED_EXPENSE, /*FORECAST_INCOME, FORECAST_MARGIN,*/ FORECAST_COLLECT_LBS, FORECAST_VSP_LBS, FORECAST_TOTAL_LBS, FORECAST_PERCENT_COLLECT, FORECAST_BOOKED_FREIGHT_PER_LB, FORECAST_FREIGHT_EXPENSE_PER_LB, FORECAST_FREIGHT_INCOME_PER_LB, BUDGET_BOOKED_FREIGHT, BUDGET_ALLOWANCE, BUDGET_TENDERED_EXPENSE, /*BUDGET_INCOME, BUDGET_MARGIN,*/ BUDGET_COLLECT_LBS, BUDGET_VSP_LBS, BUDGET_TOTAL_LBS, BUDGET_PERCENT_COLLECT, BUDGET_BOOKED_FREIGHT_PER_LB, BUDGET_FREIGHT_EXPENSE_PER_LB, BUDGET_FREIGHT_INCOME_PER_LB, Period, FiscalYear)
		SELECT
			pl.SOURCE_SYSTEM AS REGION
		,	SUM(CASE
				WHEN PO_RANK = 1 AND
					pl.IS_TRANSFER = 0 --if it is not A transfer PO
				THEN pl.PROD_FRT
				ELSE 0
			END) AS BOOKED_FREIGHT --+ (ISNULL(forecast.FORECAST_BOOKED_FREIGHT, 0) / @TotalWeeks) * @WeeksToForecast AS BOOKED_FREIGHT
		,	CASE
				WHEN pl.SOURCE_SYSTEM = 'WBS'
				THEN SUM(CASE
						WHEN PO_RANK = 1
						THEN pl.ALLOWANCE
						ELSE 0
					END)
					+ (ISNULL(forecast.FORECAST_ALLOWANCE, 0) / @TotalWeeks) * @WeeksToForecast
				WHEN pl.SOURCE_SYSTEM = 'UBS'
				THEN MAX(ISNULL(forecast.ACTUAL_EAST_ALLOWANCE, 0))
				WHEN pl.SOURCE_SYSTEM = 'ALB'
				THEN MAX(ISNULL(forecast.ACTUAL_EAST_ALLOWANCE, 0))
				WHEN pl.SOURCE_SYSTEM = 'TFF'
				THEN MAX(ISNULL(forecast.ACTUAL_EAST_ALLOWANCE, 0))
				WHEN pl.SOURCE_SYSTEM = 'TMW'
				THEN MAX(ISNULL(forecast.ACTUAL_EAST_ALLOWANCE, 0))
			END AS ALLOWANCE
		,	SUM(
			ISNULL(pl.BILLED_EXPENSE, 0)
			+ ISNULL(pl.BACKHAUL_EXPENSE, 0)
			)
			+ /*<Unbilled expense>*/
			(SELECT SUM(UNBILLED_EXPENSE)
				FROM (SELECT CASE
							WHEN SUM(lpo2.TOTAL_WEIGHT) OVER (PARTITION BY n.LO_LOAD_NUMBER) > 0
							THEN lpo2.TOTAL_WEIGHT / SUM(lpo2.TOTAL_WEIGHT) OVER (PARTITION BY n.LO_LOAD_NUMBER) * ca.TOTAL
							ELSE 0
						END AS UNBILLED_EXPENSE
					FROM LO_PURCHASE_ORDERS lpo2 WITH (NOLOCK)
						INNER JOIN BL_BILL_POS bbp2 WITH (NOLOCK)
								ON lpo2.LO_PURCHASE_ORDER_ID = bbp2.LO_PURCHASE_ORDER_ID
									AND ISNULL(bbp2.IS_DELETED, 0) = 0
						INNER JOIN #NFB n
								ON n.LO_LOAD_NUMBER = bbp2.LO_LOAD_NUMBER
						INNER JOIN CR_AGREEMENT ca WITH (NOLOCK)
								ON n.LO_LOAD_NUMBER = ca.LO_LOAD_NUMBER) x)
			/*<Unbilled expense>*/
			+ CASE
				WHEN pl.SOURCE_SYSTEM = 'WBS'
				THEN ISNULL(@WestAccrual, 0)
				WHEN pl.SOURCE_SYSTEM = 'UBS'
				THEN ISNULL(@EastAccrual, 0)
				WHEN pl.SOURCE_SYSTEM = 'ALB'
				THEN ISNULL(@AlbertsAccrual, 0)
				WHEN pl.SOURCE_SYSTEM = 'TFF'
				THEN ISNULL(@TonysAccrual, 0)
				WHEN pl.SOURCE_SYSTEM = 'TMW'
				THEN ISNULL(@TMWAccrual, 0)
			END + (ISNULL(forecast.FORECAST_TENDERED_EXPENSE, 0) / @TotalWeeks) * @WeeksToForecast
			AS FREIGHT_TENDERED_EXPENSE
		,	SUM(pl.COLLECT_LBS) + (ISNULL(forecast.FORECAST_COLLECT_LBS, 0) / @TotalWeeks) * @WeeksToForecast AS COLLECT_LBS
		,	SUM(pl.VSP_LBS) + (ISNULL(forecast.FORECAST_VSP_LBS, 0) / @TotalWeeks) * @WeeksToForecast AS VSP_LBS
		,	SUM(CASE
				WHEN pl.PO_RANK = 1
				THEN pl.po_weight
				ELSE 0
			END) + (ISNULL(forecast.FORECAST_COLLECT_LBS, 0) / @TotalWeeks) * @WeeksToForecast + (ISNULL(forecast.FORECAST_VSP_LBS, 0) / @TotalWeeks) * @WeeksToForecast AS TOTAL_LBS
		,	/*<collect lbs>*/ (SUM(pl.COLLECT_LBS) + (ISNULL(forecast.FORECAST_COLLECT_LBS, 0) / @TotalWeeks) * @WeeksToForecast) /*</collect lbs>*/
			/
			/*<total lbs>*/ (SUM(CASE
				WHEN pl.PO_RANK = 1
				THEN pl.po_weight
				ELSE 0
			END) + (ISNULL(forecast.FORECAST_COLLECT_LBS, 0) / @TotalWeeks) * @WeeksToForecast + (ISNULL(forecast.FORECAST_VSP_LBS, .0000001) / @TotalWeeks) * @WeeksToForecast)
			/*</total lbs>*/
			AS PERCENT_COLLECT
		,	forecast.FORECAST_BOOKED_FREIGHT
		,	forecast.FORECAST_ALLOWANCE
		,	forecast.FORECAST_TENDERED_EXPENSE
		,	forecast.FORECAST_COLLECT_LBS
		,	forecast.FORECAST_VSP_LBS
		,	forecast.FORECAST_VSP_LBS + forecast.FORECAST_COLLECT_LBS AS FORECAST_TOTAL_LBS
		,	forecast.FORECAST_COLLECT_LBS / (forecast.FORECAST_VSP_LBS + forecast.FORECAST_COLLECT_LBS) AS FORECAST_PERCENT_COLLECT
		,	forecast.FORECAST_BOOKED_FREIGHT / (/*forecast.FORECAST_VSP_LBS +*/forecast.FORECAST_COLLECT_LBS) AS FORECAST_BOOKED_FREIGHT_PER_LB
		,	(forecast.FORECAST_EXPENSE) / (/*forecast.FORECAST_VSP_LBS + */forecast.FORECAST_COLLECT_LBS) AS FORECAST_FREIGHT_EXPENSE_PER_LB
		,	forecast.FORECAST_INCOME / (/*forecast.FORECAST_VSP_LBS +*/forecast.FORECAST_COLLECT_LBS) AS FORECAST_FREIGHT_INCOME_PER_LB
		,	forecast.BUDGET_BOOKED_FREIGHT
		,	forecast.BUDGET_ALLOWANCE
		,	forecast.BUDGET_TENDERED_EXPENSE
		,	forecast.BUDGET_COLLECT_LBS
		,	forecast.BUDGET_VSP_LBS
		,	forecast.BUDGET_VSP_LBS + forecast.BUDGET_COLLECT_LBS AS BUDGET_TOTAL_LBS
		,	forecast.BUDGET_COLLECT_LBS / (forecast.BUDGET_VSP_LBS + forecast.BUDGET_COLLECT_LBS) AS BUDGET_PERCENT_COLLECT
		,	forecast.BUDGET_BOOKED_FREIGHT / (/*forecast.BUDGET_VSP_LBS +*/forecast.BUDGET_COLLECT_LBS) AS BUDGET_BOOKED_FREIGHT_PER_LB
		,	(forecast.BUDGET_EXPENSE) / (/*forecast.BUDGET_VSP_LBS +*/forecast.BUDGET_COLLECT_LBS) AS BUDGET_FREIGHT_EXPENSE_PER_LB
		,	forecast.BUDGET_INCOME / (/*forecast.BUDGET_VSP_LBS +*/forecast.BUDGET_COLLECT_LBS) AS BUDGET_FREIGHT_INCOME_PER_LB
		,	pl.Period
		,	pl.FiscalYear
		FROM #PO_LOADS pl WITH (NOLOCK)
			LEFT JOIN #FORECAST forecast WITH (NOLOCK)
					ON pl.Period = forecast.BUDGET_PERIOD
						AND pl.FiscalYear = forecast.BUDGET_YEAR
						AND pl.SOURCE_SYSTEM = forecast.SOURCE_SYSTEM
			LEFT JOIN (SELECT uc.Period, uc.FiscalYear, SUM(TOTAL_WEIGHT) AS TOTAL_WEIGHT
					FROM LO_PURCHASE_ORDERS lpo WITH (NOLOCK)
						INNER JOIN TMS_VENDOR tv WITH (NOLOCK)
								ON lpo.TMS_VENDOR_ID = tv.TMS_VENDOR_ID
						INNER JOIN tblUNFIfiscalCalendar uc WITH (NOLOCK)
								ON lpo.REC_DATE BETWEEN uc.WeekStart AND uc.WeekEnd
					WHERE lpo.REC_DATE BETWEEN @StartDate AND @EndDate
						AND tv.IS_TRANSFER_VENDOR = 1
					GROUP BY Period, uc.FiscalYear) transferweight
					ON pl.FiscalYear = transferweight.FiscalYear
						AND pl.Period = transferweight.Period
		GROUP BY	pl.Period
				,	pl.FiscalYear
				,	pl.SOURCE_SYSTEM
				,	BUDGET_YEAR
				,	BUDGET_PERIOD
				,	BUDGET_COLLECT_LBS
				,	BUDGET_VSP_LBS
				,	BUDGET_BOOKED_FREIGHT
				,	BUDGET_ALLOWANCE
				,	BUDGET_TENDERED_EXPENSE
				,	BUDGET_EXPENSE
				,	BUDGET_INCOME
				,	FORECAST_COLLECT_LBS
				,	FORECAST_VSP_LBS
				,	FORECAST_BOOKED_FREIGHT
				,	FORECAST_ALLOWANCE
				,	FORECAST_TENDERED_EXPENSE
				,	FORECAST_EXPENSE
				,	FORECAST_INCOME
				,	ACTUAL_EAST_ALLOWANCE


	PRINT 'Final Combilation'
	PRINT CONVERT(VARCHAR, SYSDATETIME(), 121)

	SELECT
		s.REGION
	,	s.BOOKED_FREIGHT
	,	s.ALLOWANCE
	,	s.FREIGHT_TENDERED_EXPENSE
	,	s.FREIGHT_EXPENSE
	,	s.FREIGHT_INCOME
	,	s.FREIGHT_MARGIN
	,	s.COLLECT_LBS
	,	s.VSP_LBS
	,	s.TOTAL_LBS
	,	s.PERCENT_COLLECT
	,	s.BOOKED_FREIGHT / s.COLLECT_LBS AS BOOKED_FREIGHT_PER_LB
	,	s.FREIGHT_EXPENSE / s.COLLECT_LBS AS FREIGHT_EXPENSE_PER_LB
	,	s.FREIGHT_INCOME / s.COLLECT_LBS AS FREIGHT_INCOME_PER_LB
	,	s.FORECAST_BOOKED_FREIGHT
	,	s.FORECAST_ALLOWANCE
	,	s.FORECAST_TENDERED_EXPENSE
	,	s.FORECAST_EXPENSE
	,	s.FORECAST_INCOME
	,	s.FORECAST_MARGIN
	,	s.FORECAST_COLLECT_LBS
	,	s.FORECAST_VSP_LBS
	,	s.FORECAST_TOTAL_LBS
	,	s.FORECAST_PERCENT_COLLECT
	,	s.FORECAST_BOOKED_FREIGHT_PER_LB
	,	s.FORECAST_FREIGHT_EXPENSE_PER_LB
	,	s.FORECAST_FREIGHT_INCOME_PER_LB
	,	s.BUDGET_BOOKED_FREIGHT
	,	s.BUDGET_ALLOWANCE
	,	s.BUDGET_TENDERED_EXPENSE
	,	s.BUDGET_EXPENSE
	,	s.BUDGET_INCOME
	,	s.BUDGET_MARGIN
	,	s.BUDGET_COLLECT_LBS
	,	s.BUDGET_VSP_LBS
	,	s.BUDGET_TOTAL_LBS
	,	s.BUDGET_PERCENT_COLLECT
	,	s.BUDGET_BOOKED_FREIGHT_PER_LB
	,	s.BUDGET_FREIGHT_EXPENSE_PER_LB
	,	s.BUDGET_FREIGHT_INCOME_PER_LB
	,	PREVIOUS.BOOKED_FREIGHT AS LAST_YEAR_BOOKED_FREIGHT
	,	PREVIOUS.FREIGHT_TENDERED_EXPENSE AS LAST_YEAR_FREIGHT_TENDERED_EXPENSE
	,	PREVIOUS.FREIGHT_EXPENSE AS LAST_YEAR_EXPENSE
	,	PREVIOUS.ALLOWANCE AS LAST_YEAR_ALLOWANCE
	,	PREVIOUS.FREIGHT_INCOME AS LAST_YEAR_FREIGHT_INCOME
	,	PREVIOUS.FREIGHT_MARGIN AS LAST_YEAR_FREIGHT_MARGIN
	,	PREVIOUS.COLLECT_LBS AS LAST_YEAR_COLLECT_LBS
	,	PREVIOUS.VSP_LBS AS LAST_YEAR_VSP_LBS
	,	PREVIOUS.TOTAL_LBS AS LAST_YEAR_TOTAL_LBS
	,	PREVIOUS.PERCENT_COLLECT AS LAST_YEAR_PERCENT_COLLECT
	,	PREVIOUS.BOOKED_FREIGHT / PREVIOUS.COLLECT_LBS AS LAST_YEAR_BOOKED_FREIGHT_PER_LB
	,	PREVIOUS.FREIGHT_EXPENSE / PREVIOUS.COLLECT_LBS AS LAST_YEAR_FREIGHT_EXPENSE_PER_LB
	,	PREVIOUS.FREIGHT_INCOME / PREVIOUS.COLLECT_LBS AS LAST_YEAR_FREIGHT_INCOME_PER_LB

	,	s.BOOKED_FREIGHT - s.FORECAST_BOOKED_FREIGHT AS FVA_BOOKED_FREIGHT
	,	s.ALLOWANCE - s.FORECAST_ALLOWANCE AS FVA_ALLOWANCE
	,	s.FREIGHT_TENDERED_EXPENSE - s.FORECAST_TENDERED_EXPENSE AS FVA_FREIGHT_TENDERED_EXPENSE
	,	s.FREIGHT_EXPENSE - s.FORECAST_EXPENSE AS FVA_FREIGHT_EXPENSE
	,	s.FREIGHT_INCOME - s.FORECAST_INCOME AS FVA_FREIGHT_INCOME
	,	s.FREIGHT_MARGIN - s.FORECAST_MARGIN AS FVA_FREIGHT_MARGIN
	,	s.COLLECT_LBS - s.FORECAST_COLLECT_LBS AS FVA_COLLECT_LBS
	,	s.VSP_LBS - s.FORECAST_VSP_LBS AS FVA_VSP_LBS
	,	s.TOTAL_LBS - s.FORECAST_TOTAL_LBS AS FVA_TOTAL_LBS
	,	s.PERCENT_COLLECT - s.FORECAST_PERCENT_COLLECT AS FVA_PERCENT_COLLECT
	,	(s.BOOKED_FREIGHT / s.COLLECT_LBS) - s.FORECAST_BOOKED_FREIGHT_PER_LB AS FVA_BOOKED_FREIGHT_PER_LB
	,	(s.FREIGHT_EXPENSE / s.COLLECT_LBS) - s.FORECAST_FREIGHT_EXPENSE_PER_LB AS FVA_FREIGHT_EXPENSE_PER_LB
	,	(s.FREIGHT_INCOME / s.COLLECT_LBS) - s.FORECAST_FREIGHT_INCOME_PER_LB AS FVA_FREIGHT_INCOME_PER_LB

	,	s.BOOKED_FREIGHT - s.BUDGET_BOOKED_FREIGHT AS BVA_BOOKED_FREIGHT
	,	s.ALLOWANCE - s.BUDGET_ALLOWANCE AS BVA_ALLOWANCE
	,	s.FREIGHT_TENDERED_EXPENSE - s.BUDGET_TENDERED_EXPENSE AS BVA_FREIGHT_TENDERED_EXPENSE
	,	s.FREIGHT_EXPENSE - s.BUDGET_EXPENSE AS BVA_FREIGHT_EXPENSE
	,	s.FREIGHT_INCOME - s.BUDGET_INCOME AS BVA_FREIGHT_INCOME
	,	s.FREIGHT_MARGIN - s.BUDGET_MARGIN AS BVA_FREIGHT_MARGIN
	,	s.COLLECT_LBS - s.BUDGET_COLLECT_LBS AS BVA_COLLECT_LBS
	,	s.VSP_LBS - s.BUDGET_VSP_LBS AS BVA_VSP_LBS
	,	s.TOTAL_LBS - s.BUDGET_TOTAL_LBS AS BVA_TOTAL_LBS
	,	s.PERCENT_COLLECT - s.BUDGET_PERCENT_COLLECT AS BVA_PERCENT_COLLECT
	,	(s.BOOKED_FREIGHT / s.COLLECT_LBS) - s.BUDGET_BOOKED_FREIGHT_PER_LB AS BVA_BOOKED_FREIGHT_PER_LB--
	,	s.FREIGHT_EXPENSE / s.COLLECT_LBS - s.BUDGET_FREIGHT_EXPENSE_PER_LB AS BVA_FREIGHT_EXPENSE_PER_LB--
	,	(s.FREIGHT_INCOME / s.COLLECT_LBS) - s.BUDGET_FREIGHT_INCOME_PER_LB AS BVA_FREIGHT_INCOME_PER_LB--

	,	s.BOOKED_FREIGHT - PREVIOUS.BOOKED_FREIGHT AS PVA_BOOKED_FREIGHT
	,	s.ALLOWANCE - PREVIOUS.ALLOWANCE AS PVA_ALLOWANCE
	,	s.FREIGHT_TENDERED_EXPENSE - PREVIOUS.FREIGHT_TENDERED_EXPENSE AS PVA_FREIGHT_TENDERED_EXPENSE
	,	s.FREIGHT_EXPENSE - PREVIOUS.FREIGHT_EXPENSE AS PVA_FREIGHT_EXPENSE
	,	s.FREIGHT_INCOME - PREVIOUS.FREIGHT_INCOME AS PVA_FREIGHT_INCOME
	,	s.FREIGHT_MARGIN - PREVIOUS.FREIGHT_MARGIN AS PVA_FREIGHT_MARGIN
	,	s.COLLECT_LBS - PREVIOUS.COLLECT_LBS AS PVA_COLLECT_LBS
	,	s.VSP_LBS - PREVIOUS.VSP_LBS AS PVA_VSP_LBS
	,	s.TOTAL_LBS - PREVIOUS.TOTAL_LBS AS PVA_TOTAL_LBS
	,	s.PERCENT_COLLECT - PREVIOUS.PERCENT_COLLECT AS PVA_PERCENT_COLLECT
	,	(s.BOOKED_FREIGHT / s.COLLECT_LBS) - (PREVIOUS.BOOKED_FREIGHT / PREVIOUS.COLLECT_LBS) AS PVA_BOOKED_FREIGHT_PER_LB--
	,	(s.FREIGHT_EXPENSE / s.COLLECT_LBS) - (PREVIOUS.FREIGHT_EXPENSE / PREVIOUS.COLLECT_LBS) AS PVA_FREIGHT_EXPENSE_PER_LB--
	,	(s.FREIGHT_INCOME / s.COLLECT_LBS) - (PREVIOUS.FREIGHT_INCOME / PREVIOUS.COLLECT_LBS) AS PVA_FREIGHT_INCOME_PER_LB--

	,	((s.BOOKED_FREIGHT - s.FORECAST_BOOKED_FREIGHT) / NULLIF(s.FORECAST_BOOKED_FREIGHT, 0)) AS FVA_BOOKED_FREIGHT_PERC
	,	((s.ALLOWANCE - s.FORECAST_ALLOWANCE) / NULLIF(s.FORECAST_ALLOWANCE, 0)) AS FVA_ALLOWANCE_PERC
	,	((s.FREIGHT_TENDERED_EXPENSE - s.FORECAST_TENDERED_EXPENSE) / NULLIF(s.FORECAST_TENDERED_EXPENSE, 0)) AS FVA_FREIGHT_TENDERED_EXPENSE_PERC
	,	((s.FREIGHT_EXPENSE - s.FORECAST_EXPENSE) / NULLIF(s.FORECAST_EXPENSE, 0)) AS FVA_FREIGHT_EXPENSE_PERC
	,	((s.FREIGHT_INCOME - s.FORECAST_INCOME) / NULLIF(s.FORECAST_INCOME, 0)) AS FVA_FREIGHT_INCOME_PERC
	,	((s.FREIGHT_MARGIN - s.FORECAST_MARGIN) / NULLIF(s.FORECAST_MARGIN, 0)) AS FVA_FREIGHT_MARGIN_PERC
	,	((s.COLLECT_LBS - s.FORECAST_COLLECT_LBS) / NULLIF(s.FORECAST_COLLECT_LBS, 0)) AS FVA_COLLECT_LBS_PERC
	,	((s.VSP_LBS - s.FORECAST_VSP_LBS) / NULLIF(s.FORECAST_VSP_LBS, 0)) AS FVA_VSP_LBS_PERC
	,	((s.TOTAL_LBS - s.FORECAST_TOTAL_LBS) / NULLIF(s.FORECAST_TOTAL_LBS, 0)) AS FVA_TOTAL_LBS_PERC
	,	((s.PERCENT_COLLECT - s.FORECAST_PERCENT_COLLECT) / s.FORECAST_PERCENT_COLLECT) AS FVA_PERCENT_COLLECT_PERC
	,	(((s.BOOKED_FREIGHT / s.COLLECT_LBS) - s.FORECAST_BOOKED_FREIGHT_PER_LB) / NULLIF(s.FORECAST_BOOKED_FREIGHT_PER_LB, 0)) AS FVA_BOOKED_FREIGHT_PER_LB_PERC--
	,	(((s.FREIGHT_EXPENSE / s.COLLECT_LBS) - s.FORECAST_FREIGHT_EXPENSE_PER_LB) / NULLIF(s.FORECAST_FREIGHT_EXPENSE_PER_LB, 0)) AS FVA_FREIGHT_EXPENSE_PER_LB_PERC--
	,	(((s.FREIGHT_INCOME / s.COLLECT_LBS) - s.FORECAST_FREIGHT_INCOME_PER_LB) / NULLIF(s.FORECAST_FREIGHT_INCOME_PER_LB, 0)) AS FVA_FREIGHT_INCOME_PER_LB_PERC--

	,	((s.BOOKED_FREIGHT - s.BUDGET_BOOKED_FREIGHT) / NULLIF(s.BUDGET_BOOKED_FREIGHT, 0)) AS BVA_BOOKED_FREIGHT_PERC
	,	((s.ALLOWANCE - s.BUDGET_ALLOWANCE) / NULLIF(s.BUDGET_ALLOWANCE, 0)) AS BVA_ALLOWANCE_PERC
	,	((s.FREIGHT_TENDERED_EXPENSE - s.BUDGET_TENDERED_EXPENSE) / NULLIF(s.BUDGET_TENDERED_EXPENSE, 0)) AS BVA_FREIGHT_TENDERED_EXPENSE_PERC
	,	((s.FREIGHT_EXPENSE - s.BUDGET_EXPENSE) / NULLIF(s.BUDGET_EXPENSE, 0)) AS BVA_FREIGHT_EXPENSE_PERC
	,	((s.FREIGHT_INCOME - s.BUDGET_INCOME) / NULLIF(s.BUDGET_INCOME, 0)) AS BVA_FREIGHT_INCOME_PERC
	,	((s.FREIGHT_MARGIN - s.BUDGET_MARGIN) / NULLIF(s.BUDGET_MARGIN, 0)) AS BVA_FREIGHT_MARGIN_PERC
	,	((s.COLLECT_LBS - s.BUDGET_COLLECT_LBS) / NULLIF(s.BUDGET_COLLECT_LBS, 0)) AS BVA_COLLECT_LBS_PERC
	,	((s.VSP_LBS - s.BUDGET_VSP_LBS) / NULLIF(s.BUDGET_VSP_LBS, 0)) AS BVA_VSP_LBS_PERC
	,	((s.TOTAL_LBS - s.BUDGET_TOTAL_LBS) / NULLIF(s.BUDGET_TOTAL_LBS, 0)) AS BVA_TOTAL_LBS_PERC
	,	((s.PERCENT_COLLECT - s.BUDGET_PERCENT_COLLECT) / NULLIF(s.BUDGET_PERCENT_COLLECT, 0)) AS BVA_PERCENT_COLLECT_PERC
	,	(((s.BOOKED_FREIGHT / s.COLLECT_LBS) - s.BUDGET_BOOKED_FREIGHT_PER_LB) / NULLIF(s.BUDGET_BOOKED_FREIGHT_PER_LB, 0)) AS BVA_BOOKED_FREIGHT_PER_LB_PERC--
	,	(((s.FREIGHT_EXPENSE / s.COLLECT_LBS) - s.BUDGET_FREIGHT_EXPENSE_PER_LB) / NULLIF(s.BUDGET_FREIGHT_EXPENSE_PER_LB, 0)) AS BVA_FREIGHT_EXPENSE_PER_LB_PERC--
	,	(((s.FREIGHT_INCOME / s.COLLECT_LBS) - s.BUDGET_FREIGHT_INCOME_PER_LB) / NULLIF(s.BUDGET_FREIGHT_INCOME_PER_LB, 0)) AS BVA_FREIGHT_INCOME_PER_LB_PERC--


	,	((s.BOOKED_FREIGHT - PREVIOUS.BOOKED_FREIGHT) / NULLIF(PREVIOUS.BOOKED_FREIGHT, 0)) AS PVA_BOOKED_FREIGHT_PERC
	,	ISNULL(((s.ALLOWANCE - PREVIOUS.ALLOWANCE) / NULLIF(PREVIOUS.ALLOWANCE, 0)), 0) AS PVA_ALLOWANCE_PERC
	,	((s.FREIGHT_TENDERED_EXPENSE - PREVIOUS.FREIGHT_TENDERED_EXPENSE) / NULLIF(PREVIOUS.FREIGHT_TENDERED_EXPENSE, 0)) AS PVA_FREIGHT_TENDERED_EXPENSE_PERC
	,	((s.FREIGHT_EXPENSE - PREVIOUS.FREIGHT_EXPENSE) / NULLIF(PREVIOUS.FREIGHT_EXPENSE, 0)) AS PVA_FREIGHT_EXPENSE_PERC
	,	((s.FREIGHT_INCOME - PREVIOUS.FREIGHT_INCOME) / NULLIF(PREVIOUS.FREIGHT_INCOME, 0)) AS PVA_FREIGHT_INCOME_PERC
	,	((s.FREIGHT_MARGIN - PREVIOUS.FREIGHT_MARGIN) / NULLIF(PREVIOUS.FREIGHT_MARGIN, 0)) AS PVA_FREIGHT_MARGIN_PERC
	,	((s.COLLECT_LBS - PREVIOUS.COLLECT_LBS) / NULLIF(PREVIOUS.COLLECT_LBS, 0)) AS PVA_COLLECT_LBS_PERC
	,	((s.VSP_LBS - PREVIOUS.VSP_LBS) / NULLIF(PREVIOUS.VSP_LBS, 0)) AS PVA_VSP_LBS_PERC
	,	((s.TOTAL_LBS - PREVIOUS.TOTAL_LBS) / NULLIF(PREVIOUS.TOTAL_LBS, 0)) AS PVA_TOTAL_LBS_PERC
	,	((s.PERCENT_COLLECT - PREVIOUS.PERCENT_COLLECT) / NULLIF(PREVIOUS.PERCENT_COLLECT, 0)) AS PVA_PERCENT_COLLECT_PERC
	,	(((s.BOOKED_FREIGHT / s.COLLECT_LBS) - (PREVIOUS.BOOKED_FREIGHT / PREVIOUS.COLLECT_LBS)) / NULLIF((PREVIOUS.BOOKED_FREIGHT / PREVIOUS.COLLECT_LBS), 0)) AS PVA_BOOKED_FREIGHT_PER_LB_PERC--
	,	(((s.FREIGHT_EXPENSE / s.COLLECT_LBS) - (PREVIOUS.FREIGHT_EXPENSE / PREVIOUS.COLLECT_LBS)) / NULLIF((PREVIOUS.FREIGHT_EXPENSE / PREVIOUS.COLLECT_LBS), 0)) AS PVA_FREIGHT_EXPENSE_PER_LB_PERC--
	,	(((s.FREIGHT_INCOME / s.COLLECT_LBS) - (PREVIOUS.FREIGHT_INCOME / PREVIOUS.COLLECT_LBS)) / NULLIF((PREVIOUS.FREIGHT_INCOME / PREVIOUS.COLLECT_LBS), 0)) AS PVA_FREIGHT_INCOME_PER_LB_PERC--
	,	s.Period
	,	s.FiscalYear
	,	CASE s.REGION
			WHEN 'UBS'
			THEN 'EAST'
			WHEN 'WBS'
			THEN 'WEST'
			WHEN 'ALB'
			THEN 'ALBERT''S'
			WHEN 'TFF'
			THEN 'TONY''S'
			ELSE 'UNKNOWN'
		END AS REGION_NAME
	FROM #SUBTOTAL s WITH (NOLOCK)
		INNER JOIN (SELECT s.REGION
					, s.BOOKED_FREIGHT
					, s.ALLOWANCE
					, s.FREIGHT_TENDERED_EXPENSE
					, s.FREIGHT_EXPENSE
					, s.FREIGHT_INCOME
					, s.FREIGHT_MARGIN
					, s.COLLECT_LBS
					, s.VSP_LBS
					, s.TOTAL_LBS
					, s.PERCENT_COLLECT
				FROM #SUBTOTAL s WITH (NOLOCK)
				WHERE s.FiscalYear = @FiscalYear - 1) PREVIOUS
				ON PREVIOUS.REGION = s.REGION


	WHERE
		s.FiscalYear = @FiscalYear
		AND s.REGION IN (SELECT c FROM #SOURCE_SYSTEMS)
END
GO


